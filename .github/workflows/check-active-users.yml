# for a specified organization
# Create an actions workflow that uses the gh cli to call the GitHub API and retrieve the list of copilot users
# Trigger the workflow when a new issue with the subject "List Copilot Users" is created in the repo where this workflow lives
# The github cli will call the api using the command gh api -H "Accept: application/vnd.github+json"-H "X-GitHub-Api-Version: 2022-11-28" /orgs/ORG/copilot/billing/seats
# it will replace the ORG placeholder with the organization name specified in the issue body
# if the CLI call fails the error message will be captured and posted as a comment in the issue
# if the CLI call is successful the list of copilot users will be attached as a json file to a comment in the issue
name: List Copilot Users

on:
  issues:
    types: [opened]

jobs:
  list-users:
    if: github.event.issue.title == 'List Copilot Users'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Ensure labels exist
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const repo = context.repo;
          const labelsToEnsure = ['query-created', 'query-processing', 'query-succeeded', 'query-error'];
          for (const label of labelsToEnsure) {
            try {
              await github.rest.issues.getLabel({
                owner: repo.owner,
                repo: repo.repo,
                name: label
              });
              console.log(`Label "${label}" exists`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Label "${label}" does not exist, creating it`);
                await github.rest.issues.createLabel({
                  owner: repo.owner,
                  repo: repo.repo,
                  name: label,
                  //color: 'f29513' // choose a color for the label
                });
              } 
            }
          }

    - name: Validate secret exists
      run: |
        if [ -z "${{ secrets.COPILOT_ACCESS_LIST }}" ]; then
          echo "The COPILOT_ACCESS_LIST secret is not set. Please set it in the repository settings."
          gh issue comment ${{ github.event.issue.number }} --body "The COPILOT_ACCESS_LIST secret is not set. Please set it in the repository settings."
          exit 1
        fi
        PERMS=$(bash ./scripts/check-permissions.sh)
        if [[ ! $PERMS == *"copilot"* ]]; then
          echo "The token does not have the required permissions. Please check the permissions and try again." >secret-error.md
          echo "" >> secret-error.md
          echo "| Requires | Has |" >> secret-error.md
          echo "| --- | --- |" >> secret-error.md
          echo "| \`copilot\` | \`$PERMS\` |" >> secret-error.md
          echo $(cat secret-error.md) >> $GITHUB_STEP_SUMMARY
          gh issue comment ${{ github.event.issue.number }} --body-file secret-error.md
          exit 1
        fi
      env:
        COPILOT_ACCESS_LIST: ${{ secrets.COPILOT_ACCESS_LIST }}
        GH_TOKEN: ${{ github.token }}
        
    - name: Label Issue as query-processing
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;    
          github.rest.issues.removeLabel({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            name: 'query-created'
          });    
          github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            labels: ['query-processing']
          });      

    - name: Get organization name from issue body
      id: get-org
      run: |
        ORG=$(echo "${{ github.event.issue.body }}" | awk '/### Organization Name/{getline; getline; print}')
        echo "org=$ORG" >> "$GITHUB_OUTPUT"

    - uses: austenstone/copilot-usage@v2
      with:
        github-token: ${{ secrets.COPILOT_ACCESS_LIST }}
        organization: ${{ steps.get-org.outputs.org }}

    - uses: austenstone/job-summary@1e5a6caee47baca7b15fbb06709fd8e404258348
      id: usage-summary
      with:
        name: copilot-usage
        create-pdf-artifact: false
        create-md-artifact: false
        create-html: false
        create-md: true
    
    - name: Upload response file as artifact
      uses: actions/upload-artifact@v4.3.1
      id: uploaded-artifact
      with:
        name: Copilot-Usage
        path: |
          ${{ steps.usage-summary.outputs.pdf-file }}
        if-no-files-found: error

    - name: Post data retrieval comment
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Copilot usage data has been retrieved.  You can download a pdf [here](${{ steps.uploaded-artifact.outputs.artifact-url }}).`,
          });

    - name: Post user list as comment
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          const md_table = require('fs').readFileSync('${{ github.workspace }}/copilot-usage.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `<details><summary>Click to view the report.\nComment body could be truncated based on 10k limit.</summary>\n\n${md_table}\n\n</details>`
          }); 
          github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              name: 'query-processing'
          });
          github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              labels: ['query-succeeded']
          });           
    
    - name: Post failure comment
      if: ${{ failure() }}
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          await github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "A step in the workflow failed. Please check the logs for more information."
          });
          try {
            await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                name: 'query-processing'
            });
          } catch (error) {
            console.log("Error removing label: ", error);
          }
          try {
            await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                name: 'query-created'
            });
          } catch (error) {
            console.log("Error removing label: ", error);
          }
          await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              labels: ['query-error']
          });

    - name: Close issue if query failed
      if: ${{ failure() }}
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          github.rest.issues.update({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: "closed"
          });
