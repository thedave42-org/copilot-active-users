# Create an actions workflow that uses the gh cli to call the GitHub API and retrieve the list of copilot users
# for a specified organization
# Trigger the workflow when a new issue with the subject "List Copilot Users" is created in the repo where this workflow lives
# The github cli will call the api using the command gh api -H "Accept: application/vnd.github+json"-H "X-GitHub-Api-Version: 2022-11-28" /orgs/ORG/copilot/billing/seats
# it will replace the ORG placeholder with the organization name specified in the issue body
# if the CLI call fails the error message will be captured and posted as a comment in the issue
# if the CLI call is successful the list of copilot users will be attached as a json file to a comment in the issue
name: List Copilot Users

on:
  issues:
    types: [opened]

jobs:
  list-users:
    if: github.event.issue.title == 'List Copilot Users'
    runs-on: ubuntu-latest

    steps:
    - name: Get organization name from issue body
      id: get-org
      run: |
        ORG=$(echo "${{ github.event.issue.body }}" | awk '/### Organization Name/{getline; getline; print}')
        echo "org=$ORG" >> "$GITHUB_OUTPUT"

    - name: Call GitHub API
      id: call-api
      env: 
        GH_TOKEN: ${{ secrets.COPILOT_ACCESS_LIST }}
      run: |
        RESPONSE=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/${{ steps.get-org.outputs.org }}/copilot/billing/seats 2>&1) || true
        echo "response=$RESPONSE" >> "$GITHUB_OUTPUT"

    - name: Post comment
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          const response = `${{ steps.call-api.outputs.response }}`;
          if (!response.includes("error")) {
            const fs = require('fs');
            fs.writeFileSync('response.json', response);
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Successful API call. Copilot users: ${response}`,
              attachments: ['response.json']
            });
          } else if (response.includes("error") && ( response.includes("HTTP 403")) || response.includes() || response.includes("Bad credentials")) {
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Error: Bad credentials. Please check that the COPILOT_ACCESS_LIST secret has the \`manage_billing:copilot\` permission for the organization.`
            });
          } else if (response.includes("error") && response.includes("HTTP 401")) {
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Error: Please check the COPILOT_ACCESS_LIST secret exists and is accessible to this repository.`
            });
          } else if (response.includes("error")){
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Error: ${response}`
            });
          }

    - name: Handle failure
      if: ${{ failure() }}
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          const failedStep = steps.${{ job.status }}.name;
          const failedReason = steps.${{ job.status }}.conclusion;
          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Step "${failedStep}" failed with reason: ${failedReason}`
          });
 
    - name: Close issue
      if: ${{ always()}}
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          github.rest.issues.update({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: "closed"
          });