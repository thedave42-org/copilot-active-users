# Create an actions workflow that uses the gh cli to call the GitHub API and retrieve the list of copilot users
# for a specified organization
# Trigger the workflow when a new issue with the subject "List Copilot Users" is created in the repo where this workflow lives
# The github cli will call the api using the command gh api -H "Accept: application/vnd.github+json"-H "X-GitHub-Api-Version: 2022-11-28" /orgs/ORG/copilot/billing/seats
# it will replace the ORG placeholder with the organization name specified in the issue body
# if the CLI call fails the error message will be captured and posted as a comment in the issue
# if the CLI call is successful the list of copilot users will be attached as a json file to a comment in the issue
name: List Copilot Users

on:
  issues:
    types: [opened]

jobs:
  list-users:
    if: github.event.issue.title == 'List Copilot Users'
    runs-on: ubuntu-latest

    steps:
    - name: Get organization name from issue body
      id: get-org
      run: |
        ORG=$(echo "${{ github.event.issue.body }}" | awk '/### Organization Name/{getline; getline; print}')
        echo "org=$ORG" >> "$GITHUB_OUTPUT"

    - name: Call GitHub API
      id: call-api
      env: 
        GH_TOKEN: ${{ secrets.COPILOT_ACCESS_LIST }}
      run: |
        RESPONSE=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/octodemo/copilot/billing/seats 2>&1 | tr -d '\n' || true)
        echo "response=$RESPONSE" >> "$GITHUB_OUTPUT"
        echo $(echo $RESPONSE | jq -j '.seats') > copilot-user-list.json
        echo $(cat copilot-user-list.json | jq -r '(.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ]])[] | @csv') > copilot-user-list.csv

    # - name: JSON to CSV Action
    #   uses: austenstone/json-to-csv@v1.2
    #   id: csv
    #   with:
    #     json: ${{ steps.call-api.outputs.json }}
    
      
    # - name: Save response to file
    #   uses: actions/github-script@v7.0.1
    #   with:
    #     script: |
    #       const fs = require('fs');
    #       const json = '${{ steps.call-api.outputs.response }}';
    #       const csv = '${{ steps.csv.outputs.csv }}';
    #       fs.writeFileSync('copilot-user-list.json', json);
    #       fs.writeFileSync('copilot-user-list.csv', csv);

    - name: Upload response file as artifact
      uses: actions/upload-artifact@v4.3.1
      id: uploaded-artifact
      with:
        name: Copilot-User-List
        path: copilot-user-list.json, copilot-user-list.csv
        if-no-files-found: error

    - name: Post comment
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          const response = '${{ steps.call-api.outputs.response }}';
          if (response.includes("Bad credentials")) {
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Error: Bad credentials. Please check that the COPILOT_ACCESS_LIST secret has the \`manage_billing:copilot\` permission for the organization.`
            });
          } else if (response.includes("set the GH_TOKEN environment variable")) {
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Error: Please check the COPILOT_ACCESS_LIST secret exists and is accessible to this repository.`
            });
          } else if (response.includes("error")){
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Error: ${response}`
            });
          } else {
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `User list has been successfully retrieved.  You can access the list [here](${{ steps.uploaded-artifact.outputs.artifact-url }}).`,
            });
          }
 
    - name: Post failure comment
      if: ${{ failure() }}
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "A step in the workflow failed. Please check the logs for more information."
          });          

    - name: Close issue
      if: ${{ always() }}
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          github.rest.issues.update({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: "closed"
          });

    - name: Debugging with ssh
      if: ${{ failure() }}
      uses: lhotari/action-upterm@v1
      