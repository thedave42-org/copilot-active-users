# Create an actions workflow that uses the gh cli to call the GitHub API and retrieve the list of copilot users
# for a specified organization
# Trigger the workflow when a new issue with the subject "List Copilot Users" is created in the repo where this workflow lives
# The github cli will call the api using the command gh api -H "Accept: application/vnd.github+json"-H "X-GitHub-Api-Version: 2022-11-28" /orgs/ORG/copilot/billing/seats
# it will replace the ORG placeholder with the organization name specified in the issue body
# if the CLI call fails the error message will be captured and posted as a comment in the issue
# if the CLI call is successful the list of copilot users will be attached as a json file to a comment in the issue
name: List Copilot Users

on:
  issues:
    types: [opened]

jobs:
  list-users:
    if: github.event.issue.title == 'List Copilot Users'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Label Issue as query-processing
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          const issue_creator = '${{ github.actor }}';
          github.rest.issues.addAssignees({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            assignees: [issue_creator]
          });          
          github.rest.issues.removeLabel({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            name: 'query-created'
          });    
          github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            labels: ['query-processing']
          });      

    - name: Get organization name from issue body
      id: get-org
      run: |
        ORG=$(echo "${{ github.event.issue.body }}" | awk '/### Organization Name/{getline; getline; print}')
        echo "org=$ORG" >> "$GITHUB_OUTPUT"

    - name: Call GitHub API
      id: call-api
      env: 
        GH_TOKEN: ${{ secrets.COPILOT_ACCESS_LIST }}
      run: |
        RESPONSE=$(gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/${{ steps.get-org.outputs.org }}/copilot/billing/seats 2>&1 | tr -d '\n' || true)
        echo "response=$RESPONSE" >> "$GITHUB_OUTPUT"
    
    - name: Check API results
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const script = require('./scripts/check-results-for-errors.js');
          console.log(script({github, context}));

    - name: Save results as file
      run: |
        echo $(echo '${{ steps.call-api.outputs.response }}' | jq -j '.seats') > response.json
        cat response.json | jq -n 'reduce inputs as $in (null; . + $in)' > aggregated-response.json
        cat  aggregated-response.json | jq -r 'map( del(.assignee) + (.assignee | with_entries(.value = .value)) ) | map({login: .login, last_activity_at: .last_activity_at, last_activity_editor: .last_activity_editor, pending_cancellation_date: .pending_cancellation_date, created_at: .created_at, updated_at: .updated_at, type: .type, site_admin: .site_admin, url: .html_url})' > copilot-user-list.json
        cat  aggregated-response.json | jq -r 'map( del(.assignee) + (.assignee | with_entries(.value = .value)) ) | map({login: .login, last_activity_at: .last_activity_at, last_activity_editor: .last_activity_editor, pending_cancellation_date: .pending_cancellation_date, created_at: .created_at, updated_at: .updated_at, type: .type, site_admin: .site_admin, url: .html_url}) | (.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ]])[] | @csv' > copilot-user-list.csv
    
    - name: Upload response file as artifact
      uses: actions/upload-artifact@v4.3.1
      id: uploaded-artifact
      with:
        name: Copilot-User-List
        path: |
          copilot-user-list.json
          copilot-user-list.csv
        if-no-files-found: error

    - name: Post data retrieval comment
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `User list has been successfully retrieved.  You download both the CSV and JSON format of the data [here](${{ steps.uploaded-artifact.outputs.artifact-url }}).`,
          });

    - name: Read CSV
      id: csv
      uses: juliangruber/read-file-action@v1
      with:
        path: copilot-user-list.csv
        
    - name: Create MD
      uses: petems/csv-to-md-table-action@v3.0.0
      id: csv-table-output
      with:
        csvinput: ${{ steps.csv.outputs.content }} 
    
    - name: Save MD as file
      run: |
        echo "${{ steps.csv-table-output.outputs.markdown-table }}" > copilot-user-list.md
        
    - name: Post user list as comment
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          const md_table = require('fs').readFileSync('copilot-user-list.md');
          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `<details><summary>Click to view the user list.\nComment body could be truncated based on 10k limit.</summary>\n\n${md_table}\n\n</details>`
          }); 
          github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              name: 'query-processing'
          });
          github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              labels: ['query-succeeded']
          });           
    
    - name: Post failure comment
      if: ${{ failure() }}
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "A step in the workflow failed. Please check the logs for more information."
          });
          github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              name: 'query-processing'
          });
          github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              labels: ['query-error']
          });

    - name: Close issue if query failed
      if: ${{ failure() }}
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          github.rest.issues.update({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: "closed"
          });
