# Create an actions workflow that uses the gh cli to call the GitHub API and retrieve the list of copilot users
# for a specified organization
# Trigger the workflow when a new issue with the subject "List Copilot Users" is created in the repo where this workflow lives
# The github cli will call the api using the command gh api -H "Accept: application/vnd.github+json"-H "X-GitHub-Api-Version: 2022-11-28" /orgs/ORG/copilot/billing/seats
# it will replace the ORG placeholder with the organization name specified in the issue body
# if the CLI call fails the error message will be captured and posted as a comment in the issue
# if the CLI call is successful the list of copilot users will be attached as a json file to a comment in the issue
name: List Copilot Users

on:
  issues:
    types: [opened]

jobs:
  list-users:
    if: github.event.issue.title == 'List Copilot Users'
    runs-on: ubuntu-latest

    steps:
    - name: Get organization name from issue body
      id: get-org
      run: |
        ORG=$(echo "${{ github.event.issue.body }}" | awk '/### Organization Name/{getline; getline; print}')
        echo "org=$ORG" >> "$GITHUB_OUTPUT"

    - name: Call GitHub API
      id: call-api
      env: 
        GH_TOKEN: ${{ secrets.COPILOT_ACCESS_LIST }}
      run: |
        RESPONSE=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/${{ steps.get-org.outputs.org }}/copilot/billing/seats 2>&1 | tr -d '\n' || true)
        echo "response=$RESPONSE" >> "$GITHUB_OUTPUT"
    
    - name: Post API results comment
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          const response = '${{ steps.call-api.outputs.response }}';
          const org = '${{ steps.get-org.outputs.org }}';
          if (response.includes("Bad credentials") || response.includes("Not Found")) {
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Error: Bad credentials - the credentials used do not have access to \`${org}\` .\n\nPlease check that the \`COPILOT_ACCESS_LIST\` secret contains a valid classic PAT, and that it has the \`manage_billing:copilot\` permission for the organization.`
            });
          } else if (response.includes("set the GH_TOKEN environment variable")) {
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Error: Please check the COPILOT_ACCESS_LIST secret exists and is accessible to this repository.`
            });
          } else if (response.includes("error")){
            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Error: ${response}`
            });
          }

    - name: Save data as file
      env:
        RESPONSE: ${{ steps.call-api.outputs.response }}
      run: |
        echo $(echo $RESPONSE | jq -j '.seats') > copilot-user-list.json
        cat copilot-user-list.json | jq -r '(. | map(leaf_paths) | unique) as $cols | map (. as $row | ($cols | map(. as $col | $row | getpath($col)))) as $rows | ([($cols | map(. | map(tostring) | join(".")))] + $rows) | map(@csv) | .[]' > copilot-user-list.csv
    
    - name: Upload response file as artifact
      uses: actions/upload-artifact@v4.3.1
      id: uploaded-artifact
      with:
        name: Copilot-User-List
        path: |
          copilot-user-list.json
          copilot-user-list.csv
        if-no-files-found: error

    - name: Post data retrieval comment
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          const response = '${{ steps.call-api.outputs.response }}';
          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `User list has been successfully retrieved.  You download both the CSV and JSON format of the data [here](${{ steps.uploaded-artifact.outputs.artifact-url }}).`,
          });

    - name: Read CSV
      id: csv
      uses: juliangruber/read-file-action@v1
      with:
        path: copilot-user-list.csv
        
    - name: Create MD
      uses: petems/csv-to-md-table-action@v3.0.0
      id: csv-table-output
      with:
        csvinput: ${{ steps.csv.outputs.content }} 
        
    - name: Post user list as comment
      uses: actions/github-script@v7.0.1
      env:
        MD_TABLE: ${{ steps.csv-table-output.outputs.markdown-table }}
      with:
        script: |
          const issue_number = context.issue.number;
          const mdtable = process.env.MD_TABLE;
          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `<details><summary>Click to view the user list</summary>\n\n${mdtable}\n\n</details>`
          });  
    
    - name: Post failure comment
      if: ${{ failure() }}
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "A step in the workflow failed. Please check the logs for more information."
          });          

    - name: Close issue
      if: ${{ always() }}
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const issue_number = context.issue.number;
          github.rest.issues.update({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: "closed"
          });

    # - name: Debugging with ssh
    #   if: ${{ failure() }}
    #   uses: lhotari/action-upterm@v1
      