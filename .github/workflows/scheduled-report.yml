# Create an actions workflow that uses the gh cli to call the GitHub API and retrieve the list of copilot users once a day for a specified organization
# 1. The workflow should be triggered by a schedule event that runs every day at 00:00 UTC
# 2. The workflow should have two jobs: the first job will retrieve a list of organizations and the second job will retrieve the list of copilot users for each organization
# 3. The first job in the workflow is named get-orgs and should checkout the repo using the actions/checkout@v4
# 4. It should retrieve the list of organizations from the file ./config/organizations.json which has the structure:
# {
#   "organizations" : [
#     "octodemo",
#     "thedave42-org"
#   ]
# }
# 5. It should save the list of orgaizations as a matrix that can be retrieved by the second job
# 6. The second job depends on the first job completing successfully, should be named get-user-list, and should checkout the repo using the actions/checkout@v4
# 7. It should use the the github cli will call the api using the command gh api --pagination -H "Accept: application/vnd.github+json"-H "X-GitHub-Api-Version: 2022-11-28" /orgs/ORG/copilot/billing/seats where ORG is a value from the matrix
#  here is an example of how to accomplish this that needs to have ORG replaced with the value from the matrix:
# - name: Call GitHub API
#   id: call-api
#   env:
#     GH_TOKEN: ${{ secrets.COPILOT_ACCESS_LIST }}
#   run: |
#     RESPONSE=$(gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/ORG/copilot/billing/seats 2>&1 | tr -d '\n' || true)
#     echo "response=$RESPONSE" >> "$GITHUB_OUTPUT"
# 8. The response should be checked for errors like this:
# - name: Check API results
# uses: actions/github-script@v7.0.1
# with:
#   script: |
#     const script = require('./scripts/check-results-for-errors.js');
#     console.log(script({github, context}));
# 9. If the previous step does not fail, the response should be parsed and the list of copilot users should be saved to a file in the repo at ./data/ORG-YYMMDD-HHmmss-copilot-users.json where ORG is the name of the organization, YYMMDD is the current date, and HHmmss is the current time
#   here is an example of how to parse and save the json file
# - name: Save results as file
# run: |
#   echo $(echo '${{ steps.call-api.outputs.response }}' | jq -j '.seats') > response.json
#   cat response.json | jq -n 'reduce inputs as $in (null; . + $in)' > aggregated-response.json
#   cat  aggregated-response.json | jq -r 'map( del(.assignee) + (.assignee | with_entries(.value = .value)) ) | map({login: .login, last_activity_at: .last_activity_at, last_activity_editor: .last_activity_editor, pending_cancellation_date: .pending_cancellation_date, created_at: .created_at, updated_at: .updated_at, type: .type, site_admin: .site_admin, url: .html_url})' > ./data/ORG-YYMMDD-HHmmss-copilot-users.json
# 10. the json file created in the previous step should be checked into the repo with a comment that includes the name of the organization and the date and time the file was created using the gh cli
# 11. both jobs should run on ubuntu-latest

name: Scheduled Report

on:
  schedule:
    - cron: "0 0 * * *" # Runs every day at 00:00 UTC
  workflow_dispatch:

jobs:
  get-orgs:
    name: Get list of organizations for report
    runs-on: ubuntu-latest
    outputs:
      orgs: ${{ steps.set-matrix.outputs.orgs }}
      datetime: ${{ steps.datetime.outputs.datetime }}

    steps:
      - uses: actions/checkout@v4

      - name: Get Organization list
        id: set-matrix
        run: |
          echo "orgs=$(bash ./scripts/get-org-list.sh)" >> "$GITHUB_OUTPUT"

      - name: Set date and time
        id: datetime
        run: |
          echo "datetime=$(date +%Y%m%d-%H%M%S)" >> "$GITHUB_OUTPUT"

  get-user-list:
    name: Get list of copilot users for ${{ matrix.org }}
    needs: get-orgs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        org: ${{ fromJSON(needs.get-orgs.outputs.orgs) }}

    steps:
      - uses: actions/checkout@v4

      - name: Call GitHub API
        id: call-api
        env:
          GH_TOKEN: ${{ secrets.COPILOT_ACCESS_LIST }}
        run: |
          RESPONSE=$(gh api --paginate -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/${{ matrix.org }}/copilot/billing/seats 2>&1 | tr -d '\n' || true)
          echo "response=$RESPONSE" >> "$GITHUB_OUTPUT"

      - name: Check API results
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const script = require('./scripts/check-results-for-errors.js');
            console.log(script({github, context}));

      - name: Save results as file
        run: |
          echo $(echo '${{ steps.call-api.outputs.response }}' | jq -j '.seats') > response.json
          cat response.json | jq -n 'reduce inputs as $in (null; . + $in)' > aggregated-response.json
          cat  aggregated-response.json | jq -r 'map( del(.assignee) + (.assignee | with_entries(.value = .value)) ) | map({login: .login, last_activity_at: .last_activity_at, last_activity_editor: .last_activity_editor, pending_cancellation_date: .pending_cancellation_date, created_at: .created_at, updated_at: .updated_at, type: .type, site_admin: .site_admin, url: .html_url})' > ./data/${{ needs.get-orgs.outputs.datetime }}-${{ matrix.org }}-copilot-users.json

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git pull --rebase
          git add ./data/${{ needs.get-orgs.outputs.datetime }}-${{ matrix.org }}-copilot-users.json
          git commit -m "Added data for ${{ matrix.org }} at ${{ needs.get-orgs.outputs.datetime }}"
          git pull --rebase
          git push
